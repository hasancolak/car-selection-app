import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../store/store";
import { get } from "../api/api";
import { API_PATH } from "../utils/constants";
// import { Vehicle } from "../interface/vehicle.interface";

export interface CarState {
  makes: string[];
  models: string[];
  vehicles: string[];
  status: "idle" | "loading" | "failed";
}

const initialState: CarState = {
  makes: [],
  models: [],
  vehicles: [],
  status: "idle",
};

export const getMakeAsync = createAsyncThunk("cars/getMake", async () => {
  const response = await get(API_PATH.make);
  return response;
});

export const getModelAsync = createAsyncThunk(
  "cars/getModel",
  async (query: any) => {
    const response = await get(API_PATH.model, query);
    return response;
  }
);

export const getVehiclesAsync = createAsyncThunk(
  "cars/getVehicles",
  async (query: any) => {
    const response = await get(API_PATH.vehicle, query);
    return response;
  }
);

export const carSlice = createSlice({
  name: "cars",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // getMaker: (state, action: PayloadAction<string[]>) => {
    //   state.makers = action.payload;
    // },
    // getModel: (state, action: PayloadAction<string[]>) => {
    //   state.models = action.payload;
    // },
    // getVehicle: (state, action: PayloadAction<string[]>) => {
    //   state.Vehicle = action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMakeAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(
        getMakeAsync.fulfilled,
        (state, action: PayloadAction<string[]>) => {
          state.status = "idle";
          state.makes = action.payload;
        }
      )
      .addCase(getModelAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getModelAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.models = action.payload;
      })
      .addCase(getVehiclesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getVehiclesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.vehicles = action.payload;
      });
  },
});

// export const { getMaker, getModel, getVehicle } = carSlice.actions;

export const selectMake = (state: RootState) => state.cars.makes;
export const selectModel = (state: RootState) => state.cars.models;
export const selectVehicles = (state: RootState) => state.cars.vehicles;

export default carSlice.reducer;
